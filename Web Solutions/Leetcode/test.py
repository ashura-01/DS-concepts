# from sympy import integer_nthroot

# # Given values (replace with yours)
# N = 29331922499794985782735976045591164936683059380558950386560160105740343201513369939006307531165922708949619162698623675349030430859547825708994708321803705309459438099340427770580064400911431856656901982789948285309956111848686906152664473350940486507451771223435835260168971210087470894448460745593956840586530527915802541450092946574694809584880896601317519794442862977471129319781313161842056501715040555964011899589002863730868679527184420789010551475067862907739054966183120621407246398518098981106431219207697870293412176440482900183550467375190239898455201170831410460483829448603477361305838743852756938687673
# e = 3
# c = 2205316413931134031074603746928247799030155221252519872650073010782049179856976080512716237308882294226369300412719995904064931819531456392957957122459640736424089744772221933500860936331459280832211445548332429338572369823704784625368933

# # Compute integer cube root of c
# m, exact = integer_nthroot(c, 3)
# if not exact:
#     print("Warning: cube root not exact, approximation used")

# # Convert integer to hex string
# hex_m = hex(m)[2:]
# if len(hex_m) % 2:
#     hex_m = '0' + hex_m

# # Convert hex to bytes and decode to ASCII
# plaintext = bytes.fromhex(hex_m)
# print("Decrypted message:", plaintext.decode())
import unicodedata

def normalize_text(text):
    # Normalize to NFKC form (compatibility decomposition)
    normalized = unicodedata.normalize('NFKC', text)
    return normalized

sample = "Tｈere's sｏｍethｉｎg ｔо be sａid fоｒ Εlｏｎ Ｍｕｓｋ'ｓ Τｗіtter"
print(normalize_text(sample))
